---
import BaseHead from "../../components/BaseHead.astro";
import Header from "../../components/Header.astro";
import ReviewToggle from "../../components/ReviewToggle.svelte";
import InterviewFooter from "../../components/interview/InterviewFooter.svelte";
import { SITE_TITLE, SITE_DESCRIPTION } from "../../consts";
import { getCollection } from "astro:content";
import FormattedDate from "../../components/FormattedDate.astro";

const posts = (await getCollection("review")).sort(
  (a, b) => (b?.data?.pubDate?.valueOf() ?? 100) - (a?.data?.pubDate?.valueOf() ?? 100)
);

const postsPerPage = 10;
const totalPages = Math.ceil(posts.length / postsPerPage);
let currentPage = Number(Astro.url.searchParams.get('page')) || 1;
if(isNaN(currentPage) || currentPage < 1 || currentPage > totalPages) {
  return Astro.redirect(`${Astro.url.pathname}?page=1`);
}
const paginatedPosts = posts.slice(
  (currentPage - 1) * postsPerPage,
  currentPage * postsPerPage
);
---

<!doctype html>
<html
  lang="en"
  data-is-scrolling-up="true|false"
  data-is-bottom="true|false"
  data-is-top="true|false"
  data-has-scroll="true|false"
>
  <head>
    <BaseHead title={SITE_TITLE} description={SITE_DESCRIPTION} />

    <style>
      main,
      section {
        display: flex;
        justify-content: center;
        align-items: center;
        width: 100%;
      }
      section {
        flex-direction: column;
      }
      section * {
        word-break: break-all;
        overflow-wrap: break-word;
      }
      ul {
        width: 90%;
        max-width: 1000px;
        padding: 1rem;
        display: flex;
        flex-direction: column;
        list-style-type: none;
      }
      ul li {
        width: 100%;
        margin-bottom: 4rem;
      }
      ul li * {
        text-decoration: none;
        transition: 0.2s ease;
      }
      ul li img {
        width: 300px; /* 388 300 */
        height: 150px; /* 150 194 */
        margin-bottom: 0.5rem;
        border-radius: 12px;
        object-fit: cover;
      }
      ul li a {
        display: flex;
        gap: 20px;
      }
      .title {
        margin: 0;
        color: rgb(var(--black));
        line-height: 1;
      }
      .info {
        display: flex;
        gap: 1rem;
        justify-content: space-between;
      }
      .book-info > span {
        font-size: large;
        font-weight: 700;
        /* letter-spacing: 0px; */
        background: linear-gradient(to top, rgba(212, 190, 255, 0.5) 50%, transparent 0%);
        flex: 1;
      }
      .date-info {
        white-space: nowrap;
      }
      ul li a:hover h4,
      ul li a:hover .target {
        color: var(--color-header);
      }
      ul a:hover img {
        box-shadow: var(--box-shadow);
      }

      .content {
        display: flex;
        flex-direction: column;
        gap: 10px;
      }
      .content h4 {
        line-height: 1.4;
      }
      .content p {
        font-size: medium;
      }

      .pagination,
      .pages {
        display: flex;
        justify-content: center;
        align-items: center;
      }
      .pages {
        margin: 0 1rem;
      }
      .pagination a {
        text-decoration: none;
        padding: 0 0.6rem;
        justify-content: center;
        align-items: center;
        text-align: center;
      }
      .pagination a.active {
        color: black;
        cursor: pointer;
      }
      .pagination a.disabled {
        color: gray;
        cursor: default;
      }
      .pagination a.selected {
        font-weight: bold;
        border-radius: 8px;
        background-color: var(--color-background);
      }

      @media (max-width: 850px) {
        ul {
          grid-template-columns: repeat(1, 1fr);
        }
        ul li {
          width: 100%;
          text-align: center;
        }
        ul li img {
          width: 100%;
          height: auto;
        }
        ul li a {
          display: flex;
          flex-direction: column;
          gap: 20px;
        }

        .content {
          display: inline-block;
        }
        .content .book-info > span {
          font-size: medium;
        }
        .content .date-info {
          font-size: 80%;
        }
        .content h4 {
          font-size: large;
        }
        .content p {
          font-size: small;
          text-overflow: ellipsis;
          overflow: hidden;
          display: -webkit-box;
          word-wrap: break-word;
          word-break: break-all;
          -webkit-box-orient: vertical;
          -webkit-line-clamp: 3;
        }
      }
    </style>
  </head>
  <body>
    <Header />
    <ReviewToggle selected="review" />
    <main>
      <section>
        <ul>
          {
            paginatedPosts.map(async (post) => {
              return  (
                <li>
                  <a href={`/review/${post.slug}/`}>
                    <img width={720} height={360} src={post.data.thumbnailImage} alt="" />
                    <div class="content">
                      <div class="info">
                        <div class="book-info">
                          <span>
                            {post?.data?.target}
                            {post?.data?.creator ? ` - ${post?.data?.creator}` : ``}
                          </span>
                        </div>
                        <div class="date-info">
                          {post?.data?.pubDate && (
                            <span class="date">
                              <FormattedDate date={post?.data?.pubDate} />
                            </span>
                          )}
                        </div>
                      </div>
                      <h4 class="title">{post?.data?.title}</h4>
                      <p>{post?.data?.description}</p>
                    </div>
                  </a>
                </li>
              )
            })
          }
        </ul>
        <div class="pagination">
          <a 
            href={currentPage === 1 ? undefined : "?page=1"}
            class={currentPage !== 1 ? 'active' : 'disabled'}
            aria-disabled={currentPage === 1}
          >
            《
          </a>
          <a 
            href={currentPage > 1 ? `?page=${currentPage - 1}` : undefined}
            class={currentPage > 1 ? 'active' : 'disabled'}
            aria-disabled={currentPage === 1}
          >
            〈
          </a>
          <div class="pages">
            {Array.from({ length: Math.min(5, totalPages) }, (_, i) => {
              let pageNum;
              if (totalPages < 6) {
                pageNum = i + 1;
              } else {
                const startPage = Math.max(1, Math.min(currentPage - 2, totalPages - 4));
                pageNum = startPage + i;
              }
              return (
                <a href={`?page=${pageNum}`} class={currentPage === pageNum ? 'selected' : ''}>
                  {pageNum}
                </a>
              );
            })}
          </div>
          <a 
            href={currentPage < totalPages ? `?page=${currentPage + 1}` : undefined}
            class={currentPage < totalPages ? 'active' : 'disabled'}
            aria-disabled={currentPage === 1}
          >
            〉
          </a>
          <a 
            href={currentPage === totalPages ? undefined : `?page=${totalPages}`}
            class={currentPage !== totalPages ? 'active' : 'disabled'}
            aria-disabled={currentPage === totalPages}
          >
            》
          </a>
        </div>
      </section>
    </main>
    <InterviewFooter />
  </body>
</html>
